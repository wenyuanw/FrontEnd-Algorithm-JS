/*
 * @Author: Ran
 * @Date: 2021-03-21 20:12:58
 * @LastEditTime: 2021-03-24 20:41:22
 * @FilePath: \JZoffer\my_test\BS3-baidu-大胃王-未完成.js
 * @Description: 
 * ---------------------------------------------------------------------------
 * 题目描述：
 * 牛牛参加了大胃王比赛，面前摆上了 n 道美食，若已知每道美食能够提供的饱腹感以
 * 及牛牛感到吃撑时的饱腹感至少需要多少，那么，牛牛「最少吃几份」能够吃撑自己，
 * 请告诉他一种吃美食方案。
 * ---------------------------------------------------------------------------
 * 输入描述：
 * 本题为多组测试数组，第一行输入一个正整数 T (1 <= T <= 1000), 代表
 * 测试数据组数。
 * 
 * 对于每组测试数据，第一行输入两个正整数，n, m (1 <= n <= 1000, 1 <= m <= 1000),
 * 代表美食数量以及牛牛感到吃撑时的饱腹感。第二行输入 n 个数，依次代表每道美食所
 * 能提供的饱腹感，每道美食能提供的饱腹感不会超过 10.
 * ---------------------------------------------------------------------------
 * 输出描述：
 * 对于每组测试数据，如果这些美食能够让牛牛吃撑，那么请在第一行输出牛牛最少吃几份
 * 能吃撑，在第二行输出对应的吃美食方案，若存在多种方案，则「任意输出一种」即可：
 * 如果这些美食不能让牛牛吃撑，那么只需要在一行输出 -1 即可。
 * 
 * 示例1 输入输出示例仅供调试，后台判题数据一般不包含示例：
 * ---------------------------------------------------------------------------
 * 输入：
 * 2
 * 4 10
 * 1 2 9 5
 * 1 10
 * 9
 * 
 * 输出：
 * 2
 * 1 3
 * -1
 * ---------------------------------------------------------------------------
 */


// 输入：
// 2  测试数据的总数

// 4 10  4道菜 10 饱腹
// 1 2 9 5  每道菜的饱腹值

// 1 10   1道菜 10 饱腹
// 9  每道菜的饱腹值

// 输出
// 2  几道菜能吃饱
// 1 3  吃菜的方案
// -1   不可能吃饱，则返回-1

// 分析：
// 背包问题：
// 这里牛牛的胃就是包容量，食物就是货物体积


// 处理输入：
// 第一行
let T = parseInt(readline());

let nmArr = [];
let food = [];
// 怎么输出呢?
let res_foodnum = []; // 几道菜能吃饱,不能吃饱时为-1;
let res_methods = []; // 吃菜的方案,当 res_foodnum 为 -1 时,则设为 [] 

// 存每一组测试数据:
for (let i = 0; i < T; i++) {
    let line1 = readline().split(' ').map(item => parseInt(item)); // 菜的数量 n,饱腹值 m
    let line2 = readline().split(' ').map(item => parseInt(item)); // 每道菜所能增加的饱腹值
    nmArr[i] = line1;
    food[i] = line2;
}

for (let j = 0; j < T; j++) {
    let sum = 0;
    food[j].forEach(item => sum += item);
    // 不能饱腹的话, 直接输出 - 1
    if (sum < nmArr[j][1]) {
        res_foodnum[j] = -1;
        res_methods[j] = [];
    }
    // 剩下的就是能饱腹的时候了-----
    let n = nmArr[j][0]; // 菜的数量  4
    let m = nmArr[j][1]; // 需要吃多少才饱腹  10
    let foodArr = food[j]; // 每道菜的饱腹值  1 2 9 5

    if (Math.max(...foodArr) >= m) {
        res_foodnum[j] = 1;
        res_methods[j] = [foodArr.indexOf(Math.max(...foodArr)) + 1];
    }

}

// 输出结果
for (let k = 0; k < T; k++) {
    if (res_foodnum[k] !== -1) {
        console.log(res_foodnum[k]);
        console.log(res_methods[k].join(' '));
    } else {
        console.log('-1')
    }
}